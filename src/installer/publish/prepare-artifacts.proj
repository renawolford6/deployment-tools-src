<Project DefaultTargets="Build">
  <Import Project="Sdk.props" Sdk="Microsoft.NET.Sdk" />

  <UsingTask TaskName="GenerateChecksums" AssemblyFile="$(InstallerTasksAssemblyPath)" />

  <PropertyGroup>
    <SuppressFinalPackageVersion>true</SuppressFinalPackageVersion>
  </PropertyGroup>

  <Target Name="CreateChecksums">
    <ItemGroup>
      <ArtifactsForGeneratingChecksums
        Include="@(UploadToBlobStorageFile)"
        DestinationPath="%(FullPath)$(ChecksumExtension)" />

      <GeneratedChecksumFile Include="@(ArtifactsForGeneratingChecksums -> '%(DestinationPath)')" />
    </ItemGroup>

    <GenerateChecksums Items="@(ArtifactsForGeneratingChecksums)" />
  </Target>

  <Target Name="SignPackages"
          Condition="'$(SkipSigning)' != 'true' and '$(SignType)' != 'public'">
    <Message Importance="High" Text="Signing final packages" />
    <MSBuild
      Projects="$(SigningToolsDir)\SignFinalPackages.proj"
      Targets="Build"
      Properties="DownloadDirectory=$(DownloadDirectory)" />
  </Target>

  <Target Name="PreparePublishToAzureBlobFeed">
    <Error Condition="'$(PackagesUrl)'==''" Text="Missing property PackagesUrl" />

    <PropertyGroup>
      <ExpectedFeedUrl>$(PackagesUrl)</ExpectedFeedUrl>
      <AssetManifestFilename>Manifest.xml</AssetManifestFilename>
      <AssetManifestFile>$(ArtifactsLogDir)AssetManifest/$(AssetManifestFilename)</AssetManifestFile>

      <!-- Create temp dir to store generated asset manifest, per Arcade guidance. -->
      <TempWorkingDir>$(ArtifactsObjDir)TempWorkingDir\$([System.Guid]::NewGuid())\</TempWorkingDir>

      <!-- Directory where pdbs pointed in `FilesToPublishToSymbolServer` are copied before publishing to AzDO artifacts. -->
      <PDBsToPublishTempLocation>$(ArtifactsTmpDir)PDBsToPublish/</PDBsToPublishTempLocation>
    </PropertyGroup>

    <ItemGroup>
      <!-- Split nupkgs into shipping/nonshipping for BAR categorization. -->
      <ShippingNupkgToPublishFile
        Include="@(NupkgToPublishFile)"
        Condition="$([System.String]::new('%(Identity)').Contains('\Shipping\'))" />

      <NonShippingNupkgToPublishFile
        Include="@(NupkgToPublishFile)"
        Exclude="@(ShippingNupkgToPublishFile)" />

      <ItemsToPush Remove="@(ItemsToPush)" />

      <ItemsToPush Include="@(ShippingNupkgToPublishFile)" />
      <ItemsToPush Include="@(NonShippingNupkgToPublishFile)" ManifestArtifactData="NonShipping=true" />
      <ItemsToPush Include="@(SymbolNupkgToPublishFile)" />
    </ItemGroup>

    <!-- Push items to AzDO as build artifacts, generating the asset manifest as a side effect. -->
    <PushToAzureDevOpsArtifacts
      ItemsToPush="@(ItemsToPush)"
      ManifestBuildData="Location=$(ExpectedFeedUrl)"
      ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
      ManifestBranch="$(BUILD_SOURCEBRANCH)"
      ManifestBuildId="$(BUILD_BUILDNUMBER)"
      ManifestCommit="$(BUILD_SOURCEVERSION)"
      IsStableBuild="$(IsStableBuild)"
      AssetManifestPath="$(AssetManifestFile)"
      AssetsTemporaryDirectory="$(TempWorkingDir)" />

    <!-- Copy the generated manifest to the build's artifacts -->
    <Copy SourceFiles="$(AssetManifestFile)" DestinationFolder="$(TempWorkingDir)" />

    <Message Importance="High" Text="Uploading $(AssetManifestFilename) to pipeline" />
    <Message
      Text="##vso[artifact.upload containerfolder=AssetManifests;artifactname=AssetManifests]$(TempWorkingDir)$(AssetManifestFilename)"
      Importance="High" />

    <!-- 
        Publish Windows PDBs produced by SymStore.targets (by default, only shipping PDBs are placed there).
        SymbolUploader doesn't support embedded PDBs yet, so let SymStore.targets do the conversion for now.
        https://github.com/dotnet/symstore/issues/143
      -->
    <ItemGroup>
      <FilesToPublishToSymbolServer Include="$(ArtifactsSymStoreDirectory)**\*.pdb"/>
    </ItemGroup>

    <!--
      The below lines comprise workarounds for two issues:
        - AzDO logging commands don't let us add subfolders by executing different `##vso` commands:
          https://github.com/microsoft/azure-pipelines-tasks/issues/11689 . Therefore a parent folder
          containing all desired subfolders is published. The primary goal of these artifacts isn't
          to be browsable by humans. The target that publish the symbols will filter and publish only
          the PDB files.

        - It's possible that the user have PDBs outside the Arcade.SDK standard folder 
           (artifacts/SymStore/$Configuration) and we need to maintain that support. For that reason,
           and the one mentioned above, we copy all files in `FilesToPublishToSymbolServer` to a temporary
           folder before adding them to the AzDO artifact container.
    -->
    <Copy
			SourceFiles="@(FilesToPublishToSymbolServer)"
			DestinationFiles="@(FilesToPublishToSymbolServer->'$(PDBsToPublishTempLocation)%(RecursiveDir)%(Filename)%(Extension)')"
		/>

    <Message
      Text="##vso[artifact.upload containerfolder=PdbArtifacts;artifactname=PdbArtifacts]$(PDBsToPublishTempLocation)"
      Importance="high"
      Condition="'@(FilesToPublishToSymbolServer)' != ''"/>
  </Target>

  <Target Name="PreparePublishFilesToAzureBlobFeed"
          DependsOnTargets="GetProductVersions">
    <Error Condition="'$(PackagesUrl)'==''" Text="Missing property PackagesUrl" />

    <PropertyGroup>
      <ExpectedFeedUrl>$(PackagesUrl)</ExpectedFeedUrl>
      <AssetManifestFilename>Manifest_Installers.xml</AssetManifestFilename>
      <AssetManifestFile>$(ArtifactsLogDir)AssetManifest/$(AssetManifestFilename)</AssetManifestFile>

      <!-- Create temp dir to store generated asset manifest, per Arcade guidance. -->
      <TempWorkingDir>$(ArtifactsObjDir)TempWorkingDir\$([System.Guid]::NewGuid())\</TempWorkingDir>
    </PropertyGroup>

    <ItemGroup>
      <ItemsToPush Remove="@(ItemsToPush)" />

      <ItemsToPush
        Include="@(UploadToBlobStorageFile)"
        Exclude="@(NupkgToPublishFile);@(SymbolNupkgToPublishFile)">
        <RelativeBlobPath>$(InstallersRelativePath)%(Filename)%(Extension)</RelativeBlobPath>
      </ItemsToPush>

      <ItemsToPush Include="@(GeneratedChecksumFile)">
        <RelativeBlobPath>$(InstallersRelativePath)%(Filename)%(Extension)</RelativeBlobPath>
        <Category>Checksum</Category>
      </ItemsToPush>
    </ItemGroup>

    <!-- Push items to AzDO as build artifacts, generating the asset manifest as a side effect. -->
    <PushToAzureDevOpsArtifacts
      ItemsToPush="@(ItemsToPush)"
      ManifestBuildData="Location=$(ExpectedFeedUrl)"
      ManifestRepoUri="$(BUILD_REPOSITORY_URI)"
      ManifestBranch="$(BUILD_SOURCEBRANCH)"
      ManifestBuildId="$(BUILD_BUILDNUMBER)"
      ManifestCommit="$(BUILD_SOURCEVERSION)"
      IsStableBuild="$(IsStableBuild)"
      PublishFlatContainer="true"
      AssetManifestPath="$(AssetManifestFile)"
      AssetsTemporaryDirectory="$(TempWorkingDir)" />

    <!-- Copy the generated manifest to the build's artifacts -->
    <Copy SourceFiles="$(AssetManifestFile)" DestinationFolder="$(TempWorkingDir)" />

    <Message Importance="High" Text="Uploading $(AssetManifestFilename) to pipeline" />
    <Message
      Text="##vso[artifact.upload containerfolder=AssetManifests;artifactname=AssetManifests]$(TempWorkingDir)$(AssetManifestFilename)"
      Importance="High" />
  </Target>

  <Import Project="Sdk.targets" Sdk="Microsoft.NET.Sdk" />

  <!--
    Take assets from the build jobs, prepare them for publishing (signing, arrangement) then upload
    them to the pipeline for Arcade and custom steps to publish.
  -->
  <Target Name="Build"
          DependsOnTargets="
            FindDownloadedArtifacts;
            SignPackages;
            CreateChecksums;
            PreparePublishToAzureBlobFeed;
            PreparePublishFilesToAzureBlobFeed">
    <Message Importance="High" Text="Complete!" />
  </Target>

</Project>
